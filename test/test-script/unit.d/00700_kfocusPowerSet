#!/bin/bash
#
#  Purpose: Test kfocus-power-set on multiple devices
#  Used by: package-tools for Nvidia package
#           See ticket 1756
#
# set -u is set in test harness

#  _cpuTable=(
#    'i7-12700H;400;2300;4700'
#    'i7-11800H;800;2300;4600'
#    'i5-1135G7;400;2400;4200'
#    'i7-1165G7;400;2800;4700'
#    'i7-10870H;800;2200;5000'
#    'i7-10875H;800;2300;5100'
#    'i7-9750H;800;2600;4500'
#    'i9-9900K;800;3600;5000'
#  );

# _printIntFn () {
#   printf '%.0f' "$*";
# }

# Example kfocus-power-set -p
# High;5100000;performance;0;1
# Normal;5100000;powersave;0;1
# Medium;3700000;powersave;0;1
# Studio;2300000;performance;1;1
# Low;2300000;powersave;1;0
# Frugal;1799900;powersave;1;0
# Stingy;1550000;powersave;1;0
# _makeExpectStrFn () {
#   declare _str _pick_str _model_str _line_str \
#     _bit_list _hw_min_int _hw_base_int _hw_max_int \
#     _scale_max_int _gov_str _noturbo_int _keyboard_int \
#     _core_count _core_idx;
#
#   _str='';
#   _pick_str="${1:-}";
#   _model_str="$(grep -i 'model name' /proc/cpuinfo |uniq \
#     |awk -F':' '{print $2}')";
#
#   for _line_str in "${_cpuTable[@]}"; do
#     IFS=';' read -r -a _bit_list <<< "${_line_str}";
#     if ! echo "${_model_str}" | grep -qi "${_bit_list[0]}"; then
#       continue;
#     fi
#     _hw_min_int="${_bit_list[1]}000";
#     _hw_base_int="${_bit_list[2]}000";
#     _hw_max_int="${_bit_list[3]}000";
#     break;
#   done
#
#   IFS=';' read -r -d '' -a _bit_list <<<"${_pick_str}";
#   _scale_max_int="${_bit_list[1]}";
#   _gov_str="${_bit_list[2]}";
#   _noturbo_int="${_bit_list[3]}";
#   _keyboard_int="${_bit_list[4]}";
#
#   _core_count="$(nproc)";
#   _str='';
#   for (( _core_idx=0; _core_idx < "${_core_count}"; _core_idx++ )); do
#     _str+="CORE ${_core_idx}";
#     _str+="\n  Governor  : ${_gov_str}";
#     _str+="\n  Base Freq : ${_hw_base_int}";
#     _str+="\n  Min  Freq : ${_hw_min_int}";
#     _str+="\n  Max  Freq : ${_hw_max_int}";
#     _str+="\n  SMin Freq : ${_hw_min_int}";
#     _str+="\n  SMax Freq : ${_scale_max_int}";
#     _str+="\n";
#   done
#
#   _str+="\n  NoTurboInt: ${_noturbo_int}";
#   if [ -r /sys/devices/platform/tuxedo_keyboard/state ]; then
#     _str+="\n KbdState   : ${_keyboard_int}";
#   fi
#   _str+="\n";
#
#   echo -e "${_str}";
# }

_makeRunStrFn () {
  declare _core_root_dir _noturbo_file _kbd_state_file \
    _core_count _str _core_idx _core_loop_dir;

  _core_root_dir='/sys/devices/system/cpu';
  _noturbo_file="${_core_root_dir}/intel_pstate/no_turbo";
  _kbd_state_file='/sys/devices/platform/tuxedo_keyboard/state';
  _core_count="$(nproc)";
  _str='';

  for (( _core_idx=0; _core_idx < "${_core_count}"; _core_idx++ )); do
    _core_loop_dir="${_core_root_dir}/cpu${_core_idx}";
    _str+="CORE ${_core_idx}";
    _str+="\n  Governor  : ";
    _str+="$(cat ${_core_loop_dir}/cpufreq/scaling_governor)";
    _str+="\n  Base Freq : ";
    _str+="$(cat ${_core_loop_dir}/cpufreq/base_frequency)";
    _str+="\n  Min  Freq : ";
    _str+="$(cat ${_core_loop_dir}/cpufreq/cpuinfo_min_freq)";
    _str+="\n  Max  Freq : ";
    _str+="$(cat ${_core_loop_dir}/cpufreq/cpuinfo_max_freq)";
    _str+="\n  SMin Freq : ";
    _str+="$(cat ${_core_loop_dir}/cpufreq/scaling_min_freq)";
    _str+="\n  SMax Freq : ";
    _str+="$(cat ${_core_loop_dir}/cpufreq/scaling_max_freq)";
    _str+='\n';
  done

  _str+="\n  NoTurboInt: ";
  _str+="$(cat ${_noturbo_file})";

  if [ -r "${_kbd_state_file}" ]; then
    _str+="\n  KbdState  : ";
    _str+="$(cat "${_kbd_state_file}")";
  fi

  echo -e "${_str}";
}

_echoCpuModelNameFn () {
  declare _model_line _cpu_name;

  _model_line="$(lscpu | grep -Ei '^\s*model name' | cut -f2 -d:)";
  _cpu_name="$(
    sed -E 's/^.*\s(i[579]-[^ ]+)(|\s.*)$/\1/' <<< "${_model_line}"
  )";

  # If cpu_name is the same as model_line or blank,
  #   the cpu model was NOT successfully extracted.
  #
  if [ "${_model_line}" = "${_cpu_name}" ] \
    || [ -z "${_cpu_name}" ]; then
    _cpu_name='unknown';
  fi

  echo "${_cpu_name}";
}

## BEGIN _testLoopFn {
_testLoopFn () {
  declare _cr _cpu_name _pick_list _pick_str _power_exe _model_code \
    _test_count _test_idx _fail_count _mode_str _expect_file _run_file \
    _descr_str _expect_str _run_str _check_str

  _cr=$'\n';
  _cpu_name="$(_echoCpuModelNameFn)";

  _pick_list=( "$@" )

  # shellcheck disable=SC1090,SC2154
  _power_exe="${_t00TopDir}/package-tools/usr/lib/kfocus/";
  _power_exe+='bin/kfocus-power-set';

  _model_code="$(_cm2EchoModelStrFn 'code')";
  _test_count="$(echo "${#_pick_list[@]}*2"|bc)";
  _test_idx=0;
  _fail_count=0;
  for _pick_str in "${_pick_list[@]}"; do
    ((_test_idx++));
    _mode_str="$(echo "${_pick_str}" |cut -f1 -d';')";

    # Calculate expect and run files
    _expect_file="$(
      printf '%s/%s_%s_%s.txt' "${_t00ExpectDir}" \
        "${_model_code}" "${_cpu_name}" "${_mode_str}"
    )";
    _run_file="$(
      printf '%s/%s_%s_%s.txt' "${_t00RunDir}" \
        "${_model_code}" "${_cpu_name}" "${_mode_str}"
    )";
    if [ ! -f "${_expect_file}" ]; then touch "${_expect_file}"; fi
    if [ ! -f "${_run_file}"    ]; then touch "${_run_file}";    fi

    # Start file with description
    _descr_str="BEGIN Test ${_test_idx} of ${_test_count}:${_cr}";
    _descr_str+="  >>> kfocus-power-set ${_mode_str}";
    _cm2EchoFn "${_descr_str}";

    sudo "${_power_exe}" "${_mode_str}";
    _expect_str="$(cat "${_expect_file}")";
    sleep 1;

    _run_str="${_descr_str}${_cr}";
    _run_str+="$(_makeRunStrFn)";
    echo "${_run_str}" > "${_run_file}";

    if [ "${_expect_str}" = "${_run_str}" ]; then
      _cm2EchoFn "OK  Test ${_test_idx}\n\n";
    else
      ((_fail_count++));
      _cm2EchoFn ". FAIL Test ${_test_idx}\n\n";
      meld "${_expect_file}" "${_run_file}";
    fi

    _check_str="$("${_power_exe}" -r)";
    ((_test_idx++));
    _cm2EchoFn "BEGIN Test ${_test_idx} of ${_test_count}:";
    _cm2EchoFn "  >>> kfocus-power-set -r matches ${_mode_str}";
    if [ "${_check_str}" = "${_mode_str}" ]; then
      _cm2EchoFn "OK  Test ${_test_idx}\n\n";
    else
      ((_fail_count++));
      _cm2EchoFn "  _check_str : ${_check_str}";
      _cm2EchoFn "  _mode_str  : ${_mode_str}";
      _cm2EchoFn ". FAIL Test ${_test_idx}\n\n";
    fi
  done

  return "${_fail_count}";
}
## . END _testLoopFn }

## BEGIN _runTestFn {
_runTestFn () {
  declare _power_exe _current_mode_str _pick_str _pick_list _fail_count \
    _test_count;

  # Use function from _runUnitTests: clear out run dir and check expect dir
  if ! _t00ClearRunDirFn;    then return 1; fi
  if ! _t00CheckExpectDirFn; then return 1; fi
  
  # shellcheck disable=SC1090,SC2154
  _power_exe="${_t00TopDir}/package-tools/usr/lib/kfocus/";
  _power_exe+='bin/kfocus-power-set';
  _current_mode_str="$("${_power_exe}" -r)";

  _cm2EchoFn "TEST SUITE 1: kfocus-power-set -p parsing and execution\n";
  
  _pick_str="$("${_power_exe}" -p)";
  IFS=$'\n' read -r -d '' -a _pick_list <<<"${_pick_str}";

  _testLoopFn "${_pick_list[@]}"
  _fail_count="$?"
  _test_count="$(echo "${#_pick_list[@]}*2"|bc)";
  
  if [ "${_fail_count}" -gt 0 ]; then
    _cm2EchoFn "fail: ${_fail_count} of ${_test_count} tests failed.";
  else
    _cm2EchoFn 'ok  : Results match expected';
  fi

  _cm2EchoFn "TEST SUITE 2: kfocus-power-set -x parsing and execution\n";

  _pick_str="$("${_power_exe}" -x)";
  IFS=$'\n' read -r -d '' -a _pick_list <<<"${_pick_str}";
  _pick_list=("${_pick_list[@]:1}") # Remove the header

  _testLoopFn "${_pick_list[@]}"
   _fail_count="$?"
  _test_count="$(echo "${#_pick_list[@]}*2"|bc)"

  if [ "${_fail_count}" -gt 0 ]; then
    _cm2EchoFn "fail: ${_fail_count} of ${_test_count} tests failed.";
  else
    _cm2EchoFn 'ok  : Results match expected';
  fi;

  if [ "${_current_mode_str:0:6}" = 'Custom' ]; then
    _current_mode_str='Normal';
    _cm2EchoFn "Warn: Switch from Custom to Normal Mode";
  else
    _cm2EchoFn "Reverting to initial power mode ${_current_mode_str}";
  fi

  sudo "${_power_exe}" "${_current_mode_str}";

  return "${_fail_count}";
}
## . END _runTestFn }
