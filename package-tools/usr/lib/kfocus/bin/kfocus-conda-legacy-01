#!/bin/bash
#
# Copyright 2020-2022 MindShare Inc.
# Written for the Kubuntu Focus by:
#   - Michael Mikowski
#   - Vishwas Mruthyunjaya
#   - Erich Eickmeyer
#
# Name    : kfocus-conda
# Purpose : Install Anaconda AI environments
# License : GPL v2
# Run By  : Users
# Spec    : 526
#
set -u;

_abortFn () { 2>&1 echo; 2>&1 echo 'Ctrl+C exit'; sleep 1; exit 1; }

_exitFn () {
  _cm2WarnFn;
  _cm2AskExitFn 1 "${_baseName} aborted. Press enter to exit.";
}

_getNvSeriesStrFn () {
  declare _nv_line;

  if ! lsmod | grep -q 'nvidia_drm'; then
    1>&2 cat << _EOL01
${_baseName} ERROR

This script must be run with an Nvidia GPU and the nvidia_drm module loaded.
If you have an Nvidia GPU, please switch to "Nvidia (Performance)" or "Nvidia
(On-Demand)" mode using either the GPU selector in the system tray or
nvidia-settings.

_EOL01
    _cm2AskExitFn 20 "${_baseName} aborted. Press enter to exit.";
  fi;

  _nv_line=$(lspci |grep -i 'VGA compatible controller' |grep -i 'nvidia' );
  if echo "${_nv_line}" | grep -q 'RTX 20'; then
    echo 'rtx20'; return 0;
  elif echo "${_nv_line}" | grep -q 'RTX 30'; then
    echo 'rtx30'; return 0;
  fi

  if [ -n "${_nv_line}" ]; then
    _nv_line="Found: ${_nv_line}\n";
  fi

  1>&2 cat << _EOL02
${_baseName} ERROR: Unsupported GPU
${_nv_line}

You do not appear to be running an Nvidia RTX-20 or RTX-30 series GPU.
If you received this message in error, you may run the following to update
your GPU information:

sudo update-pciids

And then run this script again.

_EOL02

  _cm2AskExitFn 30 "${_baseName} aborted. Press enter to exit.";
}

_chkInstFn () {
  declare _inst_rx="$*";
  2>/dev/null apt list --installed |grep -q --regexp="${_inst_rx}";
  return "${?}";
}

_chkCondaEnvFn () {
  declare _env_name _mod_name _ret_int;
  _ret_int=1;
  [ "$#" -gt 0 ] && _env_name="${1}" || _env_name='__blank__';
  [ "$#" -gt 1 ] && _mod_name="${2}" || _mod_name='__blank__';
  if ( conda env list | grep -q --regexp="${_env_name}" ); then
    if [ "${_mod_name}" = '__blank__' ]; then
      _ret_int=0;
    else
      conda activate "${_env_name}" || _exitFn;
      if ( echo "import ${_mod_name}" |&2>/dev/null python ); then
        _ret_int=0;
      fi
      conda activate base;
    fi
  fi
  return ${_ret_int};
}

_fixCondaEnvFn () {
  declare _env_name _reply_str _orig_msg;
  _env_name="$*";
  if ( _chkCondaEnvFn "${_env_name}" ); then
    _reply_str=$( _cm2ReadPromptYnFn \
      "Delete and reinstall env '${_env_name}'" 'n'
    );
    if [ "${_reply_str}" = 'y' ]; then
      _orig_msg="${_cm2BlockMsg}";
      _cm2SetMsgFn "Deleting ${_env_name}";
      conda activate base                    || _exitFn;
      conda env remove --name "${_env_name}" || _exitFn;
      _cm2SucFn;
      _cm2BlockMsg="${_orig_msg}";
    fi
    echo "${_reply_str}";
  else
    _reply_str=$( _cm2ReadPromptYnFn \
      "Install conda env '${_env_name}'" 'y'
    );
    echo "${_reply_str}"
  fi
}

_setCudaPathsFn () {
  declare _cuda_root_dir _append_list _cuda_home_dir;
  if [ "${_nvSeriesStr}" = 'rtx30' ]; then
    _cuda_root_dir='/usr/local/cuda-11.1';
  else
    _cuda_root_dir='/usr/local/cuda-10.1';
  fi

  # bashsupport disable=BP2001
  _append_list=(
    "${_cuda_root_dir}/lib64"
    "${_cuda_root_dir}/nvvm/lib64"
    "${_cuda_root_dir}/targets/x86_64-linux"
  );

  _cuda_home_dir="${_cuda_root_dir}";
  set +u;
  _ldLibraryPath="$( _ap2AddPathFn "${LD_LIBRARY_PATH}" "${_append_list[@]}" )";

  export LD_LIBRARY_PATH="${_ldLibraryPath}";
  export CUDA_HOME="${_cuda_home_dir}";
  set -u;

  _cm2EchoFn "Environment variables TO EXPORT:";
  _cm2EchoFn "CUDA_HOME       : ${_cuda_home_dir}";
  _cm2EchoFn "LD_LIBRARY_PATH : ${_ldLibraryPath}";
}

_installEnvFn () {
  declare _conda_script_str _conda_repo_url _conda_md5_str \
    _is_new_conda _reply_str _chk_str __conda_setup;

  if [ "${_nvSeriesStr}" = 'rtx30' ]; then
    _cm2EchoFn '\nNvidia RTX 30-series GPU found';
    # Use a new version of Anaconda
    _conda_script_str='Anaconda3-2020.11-Linux-x86_64.sh';
    _conda_md5_str='4cd48ef23a075e8555a8b6d0a8c4bae2';

    if _chkInstFn 'kfocus-nvidia' && _chkInstFn 'cuda-toolkit-11-1' \
      && _chkInstFn 'libcudnn8' && _chkInstFn 'libnvinfer7'; then
      _cm2EchoFn 'All RTX 30-series libraries appear installed.';
    else
      _cm2SetMsgFn 'Install RTX 30-series required libraries';
      _reply_str=$( _cm2ReadPromptYnFn 'Install libraries now' 'y' );

      if [ "${_reply_str}" = 'y' ]; then
        if "${_escExe}" apt-get install kfocus-nvidia cuda-toolkit-11-1 \
          libcudnn8 libnvinfer7; then
          _cm2SucFn;
        else
          _exitFn;
        fi
      else
        _cm2WarnStrFn 'Nvidia libraries must be installed to continue.';
        _exitFn;
      fi
    fi
  elif [ "${_nvSeriesStr}" = 'rtx20' ]; then
    _cm2EchoFn '\nNvidia RTX 20-series GPU found';
    # Use an older version of Anaconda
    _conda_script_str='Anaconda3-2020.07-Linux-x86_64.sh';
    _conda_md5_str='1046c40a314ab2531e4c099741530ada';

    if _chkInstFn 'kfocus-cuda-libs'; then
      _cm2EchoFn 'All RTX 20-series libraries appear installed.';
    else
      _cm2SetMsgFn 'Install RTX 20-series required libraries';
      _reply_str=$( _cm2ReadPromptYnFn 'Install libraries now' 'y' );

      if [ "${_reply_str}" = 'y' ]; then
        if "${_escExe}" apt-get install kfocus-cuda-libs; then
          _cm2EchoFn 'Install complete.';
        else
          _exitFn;
        fi
      else
        _cm2WarnStrFn 'Nvidia libraries must be installed to continue.';
        _exitFn;
      fi
    fi
  else
    _cm2SetMsgFn 'Locate Nvidia RTX GPU';
    _exitFn;
  fi

  if [ -d "${HOME}/anaconda3" ]; then
    _reply_str=$( _cm2ReadPromptYnFn \
      "\nSet aside existing dir to anaconda3.${_timeStr}" 'n'
    );
    _cm2EchoFn;

    if [ "${_reply_str}" = 'n' ]; then
      _cm2EchoFn 'Proceeding with existing anaconda3 install';
    else
      _cm2SetMsgFn "Move existing to ${HOME}/anaconda3.${_timeStr}";
      mv "${HOME}/anaconda3" "${HOME}/anaconda3.${_timeStr}" \
        || _exitFn;
      _cm2EchoFn "Delete this directory after you have moved\n" \
        "data to the new anaconda3 directory and confirmed it\n" \
        "works as expected.";
      _cm2SucFn;
    fi
  fi

  _is_new_conda=0;
  _conda_repo_url="https://repo.anaconda.com/archive/${_conda_script_str}";

  if [ ! -d "${HOME}/anaconda3" ]; then
    if [ ! -d "${_vendDirPath}" ]; then
      _cm2SetMsgFn "Create ${_vendDirPath}";
      mkdir -p "${_vendDirPath}" || _exitFn;
      _cm2SucFn;
    fi

    if [ ! -f "${_vendDirPath}/${_conda_script_str}" ]; then
      _cm2SetMsgFn 'Download Anaconda';
      pushd "${_vendDirPath}"   || _exitFn;
      wget "${_conda_repo_url}" || _exitFn;
      popd || _exitFn;
      _cm2SucFn;
    fi;

    _cm2SetMsgFn 'Check md5sum of Anaconda Package';
    _chk_str=$( md5sum "${_vendDirPath}/${_conda_script_str}" \
      | awk '{print $1}'
    );

    if [ "${_chk_str}" != "${_conda_md5_str}" ]; then
      _cm2WarnStrFn 'Please rerun the script to download again.';
      "${_rmFn}" -f "${_conda_script_str}";
      _exitFn;
    fi
    _cm2SucFn;

     _cm2SetMsgFn "Install anaconda to ${HOME}/anaconda3";
     _is_new_conda=1;
    sh "${_vendDirPath}/${_conda_script_str}" -b || _exitFn;
    "${_rmFn}" -r "${_vendDirPath}" || _exitFn;
    _cm2SucFn;
  fi

  _cm2SetMsgFn 'Initialize conda';
  if __conda_setup=$(
   "${HOME}/anaconda3/bin/conda" 'shell.bash' 'hook' 2>/dev/null
  ); then
    # These guys have serious problems with unset vars
    set +u;
    eval "$__conda_setup" || _exitFn;
    set -u;
  else
    if [ -f "${HOME}/anaconda3/etc/profile.d/conda.sh" ]; then
      # shellcheck disable=SC1090,SC1091
      source "${HOME}/anaconda3/etc/profile.d/conda.sh" || _exitFn;
    else
      export PATH="${HOME}/anaconda3/bin:$PATH" || _exitFn;
    fi
  fi
  unset __conda_setup
  _cm2SucFn;

  if ( ! command -v 'conda' > /dev/null ); then
    _cm2SetMsgFn 'Confirm Conda command';
    _exitFn;
  fi

  if [ "${_is_new_conda}" = "1" ]; then
    _cm2SetMsgFn 'Update conda (press return once)';
    _str=$(conda update -n base -c defaults conda) || _exitFn;
    _cm2EchoFn "${_str:=success}";
    _cm2SucFn;
  fi

  _reply_str=$( _fixCondaEnvFn 'jnb') || _exitFn;
  if [ "${_reply_str}" = 'y' ]; then
    _cm2SetMsgFn 'Install Jupyter Notebook';
    set +u;
    conda activate base                    || _exitFn;
    conda create -y --name jnb python=3.6  || _exitFn;
    conda activate jnb                     || _exitFn;
    conda install -y -q -c numpy matplotlib jupyter nb_conda || _exitFn;
    set -u;
    _cm2SucFn;
  fi

  if [ "${_nvSeriesStr}" = 'rtx30' ]; then
    _cm2WarnStrFn 'Install of mxnetgpu is not yet supported RTX 30-series GPUs';
  else
    _reply_str=$( _fixCondaEnvFn 'mxnetgpu') || _exitFn;
    if [ "${_reply_str}" = 'y' ]; then
      _cm2SetMsgFn 'Install Mxnet-Gpu';
      set +u;
      conda activate base                        || _exitFn;
      conda create -y --name mxnetgpu python=3.6 || _exitFn;
      conda activate mxnetgpu                    || _exitFn;
      conda install -c anaconda mxnet-gpu        || _exitFn;
      set -u;
      _cm2SucFn;
    fi
  fi

  _reply_str=$( _fixCondaEnvFn 'pytorch') || _exitFn;
  if [ "${_reply_str}" = 'y' ]; then
    _cm2SetMsgFn 'Install Pytorch';
    set +u;
    conda activate base                          || _exitFn;
    conda create -y --name pytorch python=3.6    || _exitFn;
    conda activate pytorch                       || _exitFn;

    if [ "${_nvSeriesStr}" = 'rtx30' ]; then
      _cm2EchoFn 'Installing Pytorch for RTX 30-Series GPU';
      conda install pytorch torchvision torchaudio cudatoolkit=11.1 \
        -c pytorch -c conda-forge || _exitFn;
    else
      _cm2EchoFn 'Installing Pytorch for RTX 20-Series GPU';
      conda install -y -q -c pytorch torchvision cuda92 pytorch  || _exitFn;
    fi
    set -u;
    _cm2SucFn;
  fi

  # Update 2020-05-08 with Vish
  # https://www.tensorflow.org/install/gpu
  # Also need to install tensorRT
  # See https://pypi.org/project/ai-benchmark/
  #
  # See https://pypi.org/project/tensorflow
  #   As of 2021-04-11, latest version is 2.5.0-rc0

  # https://github.com/tensorflow/tensorflow/tags

  _reply_str=$( _fixCondaEnvFn 'tensorflow') || _exitFn;
  if [ "${_reply_str}" = 'y' ]; then
    _cm2SetMsgFn 'Install TensorFlow';
    set +u;
    conda activate base || _exitFn;

    if [ "${_nvSeriesStr}" = 'rtx30' ]; then
      _cm2EchoFn 'Installing TensorFlow for RTX 30-Series GPU';

      conda create -n tensorflow pip python=3.10      || _exitFn;
      conda activate tensorflow                       || _exitFn;
      pip install -Iv tensorflow  || _exitFn;
   else
      _cm2EchoFn 'Installing TensorFlow for RTX 20-Series GPU';
      conda create -n tensorflow pip python=3.6 || _exitFn;
      conda activate tensorflow                 || _exitFn;
      pip install -Iv tensorflow==2.3.2         || _exitFn;
    fi

    pip install ai-benchmark || _exitFn;
    conda activate base      || _exitFn;
    set -u;
    _cm2SucFn;
  fi

  # TODO ~2020-11-25 msm WARM: disabled as this conflicts with AI bench.
  #   Consider reenabling when resolved.
  # if ( _chkCondaEnvFn 'tensorflow' ); then
  #   if ( _chkCondaEnvFn 'tensorflow' 'keras' ); then
  #     _reply_str=$( _cm2ReadPromptYnFn \
  #       'Reinstall Keras inside tensorflow env' 'n'
  #     )
  #   else
  #     _reply_str=$( _cm2ReadPromptYnFn \
  #       'Install Keras inside tensorflow env' 'y'
  #     );
  #   fi
  #
  #   if [ "${_reply_str}" = 'y' ]; then
  #     _cm2SetMsgFn 'Install Keras';
  #     set +u;
  #     conda activate tensorflow || _exitFn;
  #     conda install keras       || _exitFn;
  #     conda activate base       || _exitFn;
  #     _cm2SucFn;
  #     set -u;
  #   fi
  # fi

  _reply_str=$( _fixCondaEnvFn 'theano') || _exitFn;
  if [ "${_reply_str}" = 'y' ]; then
    _cm2SetMsgFn 'Install Theano';
    set +u;
    conda activate base                       || _exitFn;
    conda create -y --name theano python=3.6  || _exitFn;
    conda activate theano                     || _exitFn;
    conda install theano pygpu                || _exitFn;
    conda activate base                       || _exitFn;
    set -u;
    _cm2SucFn;
  fi

  _cm2EchoFn;
  if ( _chkCondaEnvFn 'mxnetgpu' ); then
    _cm2SetMsgFn 'Test Mxnetgpu';
    set +u;
    conda activate mxnetgpu || _exitFn;
    set -u;

    2>/dev/null python -c "${_testMxnetgpuStr}" || _cm2WarnFn;
    _cm2SucFn;
  fi

  if ( _chkCondaEnvFn 'pytorch' ); then
    _cm2SetMsgFn 'Test Pytorch';
    set +u;
    conda activate pytorch || _exitFn;
    set -u;

    2>/dev/null python -c "${_testPytorchStr}" || _cm2WarnFn;
    _cm2SucFn;
  fi

  if ( _chkCondaEnvFn 'tensorflow' ); then
    _cm2SetMsgFn 'Test TensorFlow';
    set +u;
    conda activate tensorflow || _exitFn;
    set -u;

    2>/dev/null python -c "${_testTf01Str}" || _cm2WarnFn;
    _cm2SucFn;
  fi

  # TODO ~2020-11-25 msm WARM: disabled as this conflicts with AI bench.
  #   Consider reenabling when resolved.
  # if ( _chkCondaEnvFn 'tensorflow' 'keras' ); then
  #   _cm2SetMsgFn 'Test Keras';
  #   conda activate tensorflow || _exitFn;
  #   2>/dev/null python -c "${_testKerasStr}" || _cm2WarnFn;
  #   _cm2SucFn;
  # fi

  if ( _chkCondaEnvFn 'tensorflow' ); then
    _reply_str=$( _cm2ReadPromptYnFn \
      "Benchmarks TensorFlow (takes 5-10m)" 'n'
    );
    if [ "${_reply_str}" = 'y' ]; then
      _cm2SetMsgFn 'Benchmark TensorFlow';
      set +u;
      conda activate tensorflow || _exitFn;
      set -u;

      2>/dev/null python -c "${_testTf02Str}" || _cm2WarnFn;
    fi
  fi
  conda activate base;
}

## BEGIN MAIN {
## Begin Initialize {
# Set _binDir and _baseDir
_binName=$(  readlink -f "$0"       );
_baseName=$( basename "${_binName}" );
_binDir=$(   dirname  "${_binName}" );
_baseDir=$(  dirname  "${_binDir}"  );

_ldLibraryPath='';
_cudaHomePath='';
_blkStr='/>>> conda initialize >>>/,/<<< conda initialize <<</d';
_replyStr='';
_rmFn=/bin/rm;
_timeStr=$(date +%s);
_userId=$(id -u);
_vendDirPath="${HOME}/vendor.$(date +%s)";
## . End Initialize }

## Begin Import Common {
# Import common: _cm2AskExitFn _cm2BlockMsg _cm2EchoFn _cm2ReadPromptYnFn
# _cm2SetMsgFn _cm2SucFn _cm2WarnFn _cm2WarnStrFn
# Import arrayPath: _ap2AddPathFn
#
for _fileName in 'common.2.source' 'arrayPath.source'; do
  _libFile="${_baseDir}/lib/${_fileName}";
  _doExitStr='n';

  if [ -r "${_libFile}" ]; then
    # shellcheck source=../lib/common.2.source
    # shellcheck source=../lib/arrayPath.source
    if ! source "${_libFile}"; then _doExitStr='y'; fi
  else
    _doExitStr='y';
  fi

  if [ "${_doExitStr}" = 'y' ]; then
    1>&2 echo "${_baseName}: ABORT - Cannot source lib |${_libFile}|";
    1>&2 echo 'Press return to exit.';
    # shellcheck disable=2034
    read -r _reply;
    exit 201;
  fi
done
## . End Import Common }

# Get escalation exe
_escExe="$(_cm2GetEscExeFn)" || exit;

# trap CTRL+C to avoid 'bash crashed...' message
trap _abortFn SIGINT;

# Check Nvidia Modules and PCI devices
if ! _nvSeriesStr="$( _getNvSeriesStrFn )"; then
  exit "$?";
fi

_condaRawStr=$(cat << '_HERE01'
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$(
  '${HOME}/anaconda3/bin/conda' 'shell.bash' 'hook' 2>/dev/null;
)";
if [ $? -eq 0 ]; then
  eval "$__conda_setup";
else
  if [ -f "${HOME}/anaconda3/etc/profile.d/conda.sh" ]; then
    source "${HOME}/anaconda3/etc/profile.d/conda.sh";
  else
    export PATH="${HOME}/anaconda3/bin:$PATH";
  fi
fi
unset __conda_setup
# <<< conda initialize <<<
_HERE01
);

# TODO ~2020-11-25 msm WARM: disabled as this conflicts with AI bench.
# _testKerasStr=$(cat << '_HERE02';
# import tensorflow as tf
# import keras.backend.tensorflow_backend as tfback
# print("tf.version:", tf.version)
# # print("tf.keras.version:", tf.keras.version)
#
# def _get_available_gpus():
#   global _LOCAL_DEVICES
#   if tfback._LOCAL_DEVICES is None:
#     devices = tf.config.list_logical_devices()
#     tfback._LOCAL_DEVICES = [x.name for x in devices]
#   return [x for x in tfback._LOCAL_DEVICES if 'device:gpu' in x.lower()]
#
# tfback._get_available_gpus = _get_available_gpus
# print("Keras available GPUs:", tfback._get_available_gpus() )
# _HERE02
# );

_testMxnetgpuStr=$(cat << '_HERE03';
# Test script to test if mxnet uses GPU
import mxnet as mx
a = mx.nd.ones((2, 3), mx.gpu())
b = a * 2 + 1
b.asnumpy()
print('GPU acceleration confirmed in mxnet', mx.__version__)
_HERE03
);

_testPytorchStr=$(cat << '_HERE04';
import torch
# Setting a device on GPU if available, else CPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print('Using device:', device)
print()

# Additional Info when using cuda
if device.type == 'cuda':
    print(torch.cuda.get_device_name(0))
    print('Memory Usage:')
    print('Allocated:', round(torch.cuda.memory_allocated(0)/1024**3,1), 'GB')
    print('Cached:   ', round(torch.cuda.memory_cached(0)/1024**3,1), 'GB')
_HERE04
);

_testTf01Str=$(cat << '_HERE05';
import tensorflow as tf
print( 'TF Version: ', tf.__version__ )
print( 'Devices   : ', tf.config.list_physical_devices('GPU') )
_HERE05
);

_testTf02Str=$(cat << '_HERE05a';
import tensorflow as tf
print( 'TF Version: ', tf.__version__ )
print( 'Devices   : ', tf.config.list_physical_devices('GPU') )

# See https://github.com/tensorflow/tensorflow/issues/24496
from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession
config = ConfigProto()
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

from ai_benchmark import AIBenchmark
benchmark = AIBenchmark()
results = benchmark.run()

_HERE05a
);

_welcomeStr=$(cat << '_HERE06';

KUBUNTU FOCUS DEEP LEARNING SUITE LEGACY-01

========================= WARNING ==============================
This script is a LEGACY version of the Deep Learning Suite. We
HIGHLY recommend you use the latest version found by running
kfocus-conda. Only proceed with this legacy script if you intend
to use or update an installation with older tools and libraries!
========================= WARNING ==============================

See https://kfocus.org/wf/deep.html for more information.

Use this script to install Anaconda and selectively install GPU
accelerated Jupyter Notebook, MXNet, PyTorch, TensorFlow, and
Theano.

BY PROCEEDING YOU ACKNOWLEDGE AND AGREE TO THE LICENSE AGREEMENT AT
https://docs.anaconda.com/

AND

http://docs.nvidia.com/deeplearning/sdk/cudnn-sla/index.html

AND

All other appropriate package licenses.

PLEASE REVIEW AND AGREE TO ALL LICENSES BEFORE PROCEEDING!

_HERE06
)

# use ${variable//search/replace/}?
# shellcheck disable=2001
_condaSetupStr=$(echo "${_condaRawStr}" |sed "s%\${HOME}%${HOME}%g");

_cm2EchoFn "${_welcomeStr}";

if [ "${_userId}" = '0' ]; then
  _cm2AskExitFn 5 "\nRun as regular user not root. Press return to exit.";
fi

_replyStr=$( _cm2ReadPromptYnFn \
  "\nContinue review of Anaconda install" 'y'
);

if [ "${_replyStr}" = 'y' ]; then
  _cm2EchoFn;
else
  _cm2AskExitFn 0 "\nRerun this at any time. Press return to exit.";
fi

if grep -q --regexp='^# >>> conda initialize >>>$' "${HOME}/.bashrc"; then
  _cm2SetMsgFn "Remove Conda init in ${HOME}/.bashrc";
  sed -i "${_blkStr}" "${HOME}/.bashrc" || _exitFn;
  _cm2SucFn;
fi

_cm2SetMsgFn "Append Conda init to ${HOME}/.bashrc";
echo "${_condaSetupStr}" >> "${HOME}/.bashrc" || _exitFn;
_cm2SucFn;

if ! _setCudaPathsFn; then
  _cm2WarnStrFn 'Could not set CUDA paths';
  _cm2AskExitFn 1;
  exit 1;
fi

if ! _installEnvFn; then
  _cm2WarnStrFn 'Installation not complete';
  _cm2AskExitFn 2;
fi

conda deactivate;
conda config --set auto_activate_base false;

1>&2 cat << _EOL0X

This script disables conda environments so you can continue to run
system Python scripts like backintime-qt when you open a new bash
session (like when opening a new terminal tab). To enable the conda
environment, use the following:

* Auto-enable conda using 'conda config --set auto_activate_base true'.
* Use 'false' with the above to disable auto-enable.
* Deactivate the default conda environment with 'conda deactivate'.
  This will allow you to run system Python scripts again.
_EOL0X

_cm2AskExitFn 0 "\n${_baseName} complete. Press return to exit.";

exit 0;
## . END MAIN }
