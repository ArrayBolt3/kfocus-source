#!/bin/sh
set -e

# Define SDDM theme
#if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-remove" ]; then
#  update-alternatives --install \
#    /usr/share/sddm/themes/ubuntu-theme \
#    sddm-ubuntu-theme \
#    /usr/share/sddm/themes/kfocus 40
#fi

## BEGIN Maintain adduser.local
_addUserVer="22.04.2" # BUMP THIS IF THE FOLLOWING STRING IS UPDATED
_addUserStr=$(cat << 'EOF'
#!/bin/bash
#
# THIS FILE IS AUTOMATICALLY GENERATED. ANY CHANGES MAY BE OVERWRITTEN
#   ON FUTURE UPDATES.
#
# Version: <_addUserVer_>
#
# kfocus /usr/local/sbin/adduser.local
# This must be run as root.
#
# Purpose: Set default user environment when user added.
# Run by : adduser (invoked by SystemSettings > User Manager)
# Package: kfocus-main.
#
# Exit on unset vars
# Errors (-e) are caught using errFn
#
set -u;

_mainFn () {
  echo "BEGIN ${_baseName}";

  declare _binname _username _uid _gid _home_dir _hostname \
    _rsync_exe _skel_dir _backup_dir;

  _username="${1:-}";
  _uid="${2:-}";
  _gid="${3:-}";
  _home_dir="${_rootDir}${4:-}";
  _hostname="$(hostname)";
  _rsync_exe=$(command -v rsync);
  _skel_dir="${_rootDir}/usr/lib/kfocus/skel";

  echo "  Paramters:
    _username : |${_username}|
    _uid      : |${_uid}|
    _gid      : |${_gid}|
    _home_dir : |${_home_dir}|
    _hostname : |${_hostname}|
";

  # Bail when missing data
  if [ -z "${_username}" ] || [ -z "${_uid}" ] \
    || [ -z "${_gid}" ] || [ -z "${_home_dir}" ]; then
    echo "  ${_baseName} ABORT: missing paramters";

    return 1;
  else
    echo "  - OK    : Parameters set";
  fi

  # Create standard directories
  if cd "${_home_dir}"; then
    echo "  - OK    : Making dirs in |${_home_dir}|";
    for _dir in \
      bin       \
      Desktop   \
      Documents \
      Downloads \
      Github    \
      Music     \
      Pictures  \
      Public    \
      Templates \
      Videos; do
      if mkdir -p "${_dir}" && chown -R "${_uid}.${_gid}" "${_dir}"; then
        echo "    - ok    : |${_home_dir}/${_dir}|";
      else
        echo "    - warn  : |${_home_dir}/${_dir}| create or ownership issue";
      fi
    done
  else
    echo "  - ERROR : Could not chdir to ${_home_dir}";
  fi

  # Sync ${_skel_dir}/ to home
  if [ -d "${_skel_dir}" ]; then
    if "${_rsync_exe}" -azog --chown="${_uid}:${_gid}" \
      "${_skel_dir}/" "${_home_dir}"; then
      echo "  - OK    : Synced skel configs";
    else
      echo "  - WARN  : Could not sync configs";
    fi
  else
    echo "  - ERROR: No skel dir |${_skel_dir}|";
  fi

  # Setup backintime config
  sed -i "s?\$HOME?${_home_dir}?g" \
      "${_home_dir}/.config/backintime/config" || true;
  sed -i "s?\$USER?${_username}?g" \
    "${_home_dir}/.config/backintime/config"   || true;
  sed -i "s?\$HOSTNAME?${_hostname}?g" \
    "${_home_dir}/.config/backintime/config"   || true;

  # Create backintime directory and ownership
  _backup_dir="${_rootDir}/home/BackInTime/backintime";
  _backup_dir+="/${_hostname}/${_username}";
  if mkdir -p "${_backup_dir}/1"; then
    echo "  - OK    : Created |${_backup_dir}|";
    if chown -R "${_uid}.${_gid}" "${_backup_dir}"; then
      echo "  - OK    : Chown on |${_backup_dir}|";
    else
      echo "  - ERROR : Could not chown on |${_backup_dir}|";
    fi
  else
    echo "  - ERROR : Could not create |${_backup_dir}|";
    echo -e "${_baseName} ERROR: Could not make \n  |${_backup_dir}/1|";
    return 1;
  fi
  echo ". END ${_baseName}";
}

## BEGIN Set global vars {
_binName="$(readlink -f "$0")"        || exit 0;
_baseName="$(basename "${_binName}")" || exit 0;
_rootDir='';
_debugFile="${_rootDir}/root/.${_baseName}.last.log";
## . END Set global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    _mainFn "$@" > "${_debugFile}";
fi
## . END Run main if script is not sourced }

# Always exit 0 so user can be created even if this script is broken
exit 0;
EOF
)
_addUserStr="$(
  echo "${_addUserStr}" |sed "s/<_addUserVer_>/${_addUserVer}/g"
)";

if ! [ -d /usr/local/sbin ]; then mkdir -p /usr/local/sbin; fi

if [ -e /usr/local/sbin/adduser.local ]; then
  _addUserStamp=$(grep -Ei '^# Version' /usr/local/sbin/adduser.local \
    | awk -F': ' '{ print "$2" }' );
else
  _addUserStamp='';
fi

if ! [ -e /usr/local/sbin/adduser.local ] || [ "${_addUserVer}" != "${_addUserStamp}" ]; then
  echo "${_addUserStr}" > /usr/local/sbin/adduser.local
  chmod +x /usr/local/sbin/adduser.local || true
fi
## END Maintain adduser.local

# Tag to allow some debhelper commands to inject relevant code
#DEBHELPER#
